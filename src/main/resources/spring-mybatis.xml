<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<context:component-scan base-package="com.zhidisoft.**.service"></context:component-scan>
	
	<!--  数据源 -->
	<context:property-placeholder location="classpath:jdbc.properties,classpath:redis.properties"/>
	
	
	<bean  id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 配置数据库连接信息 -->
 		<property name="driverClass"  value="${jdbc.mysql.driver}"></property>
 		<property name="jdbcUrl" value="${jdbc.mysql.url}"></property>
 		<property name="user" value="${jdbc.mysql.username}"/>
 		<property name="password" value="${jdbc.mysql.password}"></property>
 		
 		<!-- 数据库连接池自身的配置 -->
 		<property name="maxPoolSize" value="15"></property>
 		<property name="minPoolSize" value="3"></property>
 		<!-- initialPoolSize：连接池创建时初始的连接数 -->
 		<property name="initialPoolSize" value="3"></property>
 		
 		<!-- 连接持有时间  : 单位：秒 ， 8小时-->
 		<property name="maxConnectionAge" value="28800"></property>
 		<!-- 当连接mysql数据库时，最大空闲时间，不要超过8小时：  mysql有8小时陷阱   单位：秒 ， 6小时-->
 		<property name="maxIdleTime" value="21600"></property>		
	</bean>

	<!-- 配置SqlSessionfactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	
	<!-- 扫描dao接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zhidisoft.system.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	<!-- 关于事务的处理 -->
	<!-- 事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 配置事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
			
			<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
			
			<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
			
			<tx:method name="select*" propagation="SUPPORTS" isolation="DEFAULT" read-only="true"/>
			
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" read-only="false"/>
		</tx:attributes>
	</tx:advice>
		
	<aop:config>
		<!-- 事务切面 -->
		<aop:advisor advice-ref="txAdvice" pointcut="execution( * com.zhidisoft..service.impl.*.*(..))"/>
	</aop:config>
	
	
	<!-- 整合redis -->
	<!-- 引入redis的资源文件 -->
	<context:property-placeholder location="classpath:redis.properties" />

	<!--Jedis连接池的相关配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!--新版是maxTotal，旧版是maxActive -->
		<property name="maxTotal">
			<value>${redis.pool.maxActive}</value>
		</property>
		<property name="maxIdle">
			<value>${redis.pool.maxIdle}</value>
		</property>
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
	</bean>

	<bean id="jedisConnFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:use-pool="true">
		<property name="poolConfig" ref="jedisPoolConfig"></property>
		<property name="hostName" value="127.0.0.1"></property>
		<property name="port" value="6379"></property>
	</bean>

	<bean id = "redisTemplate"
		class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnFactory">
		
		<!-- 下面的配置，是对key进行序列化，否则，通过java代码保存键为“kk”到redis后，redis中查看到的key为： \xac\xed\x00\x05t\x00\x02kk 
			一旦经过配置，该模板就是线程安全的，它可以被多个实例重复使用。
			开箱即用，RedisTemplate使用了基于Java的串行器来进行大部分的操作。
			这就意味着，任何对象通过模板的读写都会通过Java来进行序列化/反序列化。
			该模板的序列化机制改变起来也很容易，并且Redis模块在org.springframework.data.redis.serializer包中提供了多种可用的实现，详情请参考Serializers。 -->
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>		
	</bean>

		
</beans>
